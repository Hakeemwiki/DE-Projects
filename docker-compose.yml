version: "3.8"  # Docker Compose file format (version 3.8 for compatibility).

services:
  # ZooKeeper service to manage Kafka's metadata and coordination.
  zookeeper:
    image: bitnami/zookeeper:latest  # Official Bitnami ZooKeeper image, lightweight and secure.
    ports:
      - "2181:2181"  # Exposes ZooKeeper's default client port.
    volumes:
      - zookeeper_data:/bitnami  # Persists ZooKeeper data.
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes  # Allows Kafka to connect without authentication.
    networks:
      - app-network  # Custom network for communication.

  # Kafka service for message queuing and streaming.
  kafka:
    image: bitnami/kafka:3.6.0  # Pinned version for stability.
    ports:
      - "9092:9092"  # Exposes PLAINTEXT listener for internal communication.
      - "9093:9093"  # Exposes EXTERNAL listener for host access.
    volumes:
      - kafka_data:/bitnami  # Persists Kafka data.
    environment:
      # Disables KRaft mode to use ZooKeeper.
      - KAFKA_ENABLE_KRAFT=no
      # Connects to ZooKeeper service (default port 2181).
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      # Defines two listeners: PLAINTEXT for internal, EXTERNAL for host access.
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,EXTERNAL://:9093
      # Advertises listeners for internal (kafka:9092) and external (localhost:9093) access.
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9093
      # Maps both listeners to PLAINTEXT protocol (no encryption).
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      # Allows plaintext connections.
      - ALLOW_PLAINTEXT_LISTENER=yes
      # Unique broker ID.
      - KAFKA_BROKER_ID=1
      # Enables auto-creation of topics.
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      # Specifies PLAINTEXT as the inter-broker listener.
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    depends_on:
      - zookeeper  # Ensures ZooKeeper starts first.
    networks:
      - app-network

  # PostgreSQL service for storing heart beat data.
  postgresql:
    image: bitnami/postgresql:latest  # Bitnami PostgreSQL image.
    ports:
      - "5434:5432"  # Maps host port 5434 to container port 5432.
    volumes:
      - postgres_data:/bitnami/postgresql  # Persists database data.
    environment:
      # References variables from .env file.
      - POSTGRESQL_USERNAME=${POSTGRESQL_USERNAME}
      - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
      - POSTGRESQL_DATABASE=${POSTGRESQL_DATABASE}
    networks:
      - app-network

  # Kafka-UI service for monitoring Kafka topics and messages.
  kafka-ui:
    image: provectuslabs/kafka-ui:latest  # Web-based UI for Kafka monitoring.
    ports:
      - "8080:8080"  # Exposes UI on localhost:8080.
    environment:
      # Names the Kafka cluster in the UI.
      - KAFKA_CLUSTERS_0_NAME=local
      # Connects to Kafka broker (internal container name, PLAINTEXT listener).
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      # Connects to ZooKeeper (default port).
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      - kafka  # Ensures Kafka is running before UI starts.
    networks:
      - app-network

  consumer:
    build: 
      context: .
      dockerfile: Dockerfile.consumer
    depends_on:
      - kafka
      - postgresql
    networks:
      - app-network
    environment:
      - PYTHONUNBUFFERED=1
      - POSTGRESQL_USERNAME=${POSTGRESQL_USERNAME}
      - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
      - POSTGRESQL_DATABASE=${POSTGRESQL_DATABASE}
    command: sh -c "sleep 15 && python scripts/kafka_consumer.py"  # Increased delay to 10 seconds
  
  producer:
    build: 
      context: .
      dockerfile: Dockerfile.producer
    depends_on:
      - kafka
      - consumer #Ensures consumer starts first
    networks:
      - app-network
    environment:
      - PYTHONUNBUFFERED=1
    command: sh -c "sleep 30 && python scripts/kafka_producer.py"  # Increased delay to 30 seconds

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - postgresql
    networks:
      - app-network


# Persistent volumes for data durability.
volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  postgres_data:
    driver: local
  grafana_data:
    driver: local

# Custom network for inter-service communication.
networks:
  app-network:
    driver: bridge  # Allows containers to communicate via service names.